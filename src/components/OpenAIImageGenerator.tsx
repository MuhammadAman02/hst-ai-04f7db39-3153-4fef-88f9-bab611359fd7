import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { generateImage } from '@/lib/openai';
import { useToast } from '@/hooks/use-toast';
import { Loader2, Image as ImageIcon } from 'lucide-react';

const OpenAIImageGenerator = () => {
  const [prompt, setPrompt] = useState('');
  const [imageUrl, setImageUrl] = useState('');
  const [size, setSize] = useState<'256x256' | '512x512' | '1024x1024'>('512x512');
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!prompt.trim()) {
      toast({
        title: "Error",
        description: "Please enter a prompt",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    setImageUrl('');

    try {
      console.log('Generating image with prompt:', prompt);
      const result = await generateImage(prompt, size);
      setImageUrl(result);
      toast({
        title: "Success",
        description: "Image generated successfully!",
      });
    } catch (error) {
      console.error('Error generating image:', error);
      toast({
        title: "Error",
        description: "Failed to generate image. Please check your API key and try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <ImageIcon className="h-5 w-5" />
          <span>OpenAI Image Generator</span>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label htmlFor="image-prompt" className="block text-sm font-medium mb-2">
              Describe the image you want to generate:
            </label>
            <Input
              id="image-prompt"
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              placeholder="A beautiful sunset over mountains..."
              disabled={isLoading}
            />
          </div>

          <div>
            <label htmlFor="size" className="block text-sm font-medium mb-2">
              Image Size:
            </label>
            <Select value={size} onValueChange={(value: '256x256' | '512x512' | '1024x1024') => setSize(value)}>
              <SelectTrigger>
                <SelectValue placeholder="Select image size" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="256x256">256x256 (Small)</SelectItem>
                <SelectItem value="512x512">512x512 (Medium)</SelectItem>
                <SelectItem value="1024x1024">1024x1024 (Large)</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <Button type="submit" disabled={isLoading} className="w-full">
            {isLoading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Generating Image...
              </>
            ) : (
              <>
                <ImageIcon className="mr-2 h-4 w-4" />
                Generate Image
              </>
            )}
          </Button>
        </form>

        {imageUrl && (
          <div className="mt-6">
            <label className="block text-sm font-medium mb-2">Generated Image:</label>
            <div className="border rounded-lg overflow-hidden">
              <img 
                src={imageUrl} 
                alt="Generated by OpenAI" 
                className="w-full h-auto"
                onLoad={() => console.log('Image loaded successfully')}
                onError={() => console.error('Failed to load generated image')}
              />
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default OpenAIImageGenerator;